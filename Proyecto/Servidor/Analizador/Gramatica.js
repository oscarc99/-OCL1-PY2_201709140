/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,16],$V1=[2,25],$V2=[1,12],$V3=[1,6],$V4=[1,4],$V5=[1,7],$V6=[1,8],$V7=[1,9],$V8=[1,10],$V9=[1,11],$Va=[1,13],$Vb=[1,14],$Vc=[1,15],$Vd=[1,17],$Ve=[1,18],$Vf=[1,19],$Vg=[1,20],$Vh=[1,21],$Vi=[2,5,11,16,17,27,30,31,32,35,37,38,39,40,62,63,64,65,66],$Vj=[1,28],$Vk=[1,27],$Vl=[1,32],$Vm=[1,30],$Vn=[1,33],$Vo=[1,34],$Vp=[1,31],$Vq=[1,47],$Vr=[1,52],$Vs=[1,46],$Vt=[1,48],$Vu=[1,50],$Vv=[1,49],$Vw=[1,51],$Vx=[1,53],$Vy=[1,54],$Vz=[1,55],$VA=[1,56],$VB=[2,17],$VC=[1,61],$VD=[1,60],$VE=[1,58],$VF=[1,63],$VG=[13,22,23,49,50,68],$VH=[2,5,11,13,15,16,17,27,30,31,32,35,37,38,39,40,43,46,48,61,62,63,64,65,66,69,70,74,75,76,77,78,79],$VI=[14,23],$VJ=[2,20],$VK=[1,79],$VL=[1,78],$VM=[1,88],$VN=[1,85],$VO=[1,86],$VP=[1,87],$VQ=[2,5,11,15,16,17,27,30,31,32,35,37,38,39,40,43,46,48,62,63,64,65,66],$VR=[14,22,23,44,53,54,55,56,57,58,59,60,69,71,72,73],$VS=[1,93],$VT=[1,94],$VU=[1,95],$VV=[1,96],$VW=[1,97],$VX=[1,98],$VY=[1,99],$VZ=[1,100],$V_=[14,22,23,53,54,55,56,57,58,59,60],$V$=[2,81],$V01=[1,107],$V11=[2,13,17,61,69,70,74,75,76,77,78,79],$V21=[1,120],$V31=[1,125],$V41=[14,22,23,44,53,54,55,56,57,58,59,60,69,73],$V51=[14,22,23,53,55,57,58],$V61=[14,22,23,53,54,55,56,57,58],$V71=[14,22,23,57,58],$V81=[1,164],$V91=[1,162],$Va1=[1,163],$Vb1=[1,173],$Vc1=[1,174],$Vd1=[2,15,16,43,46],$Ve1=[2,68],$Vf1=[1,182],$Vg1=[1,200],$Vh1=[1,190],$Vi1=[1,188],$Vj1=[1,191],$Vk1=[1,192],$Vl1=[1,193],$Vm1=[1,194],$Vn1=[1,195],$Vo1=[1,197],$Vp1=[1,199],$Vq1=[1,198],$Vr1=[1,196],$Vs1=[15,16,43,46],$Vt1=[2,15,16,17,27,30,31,32,35,37,38,39,40,43,46,48,62,63,64,65,66],$Vu1=[1,233],$Vv1=[1,232],$Vw1=[2,11,16,17,27,30,31,32,35,37,38,39,40,62,63,64,65,66];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"cuerpovoid":4,"EOF":5,"cuerpo":6,"cuerpoc":7,"tipoDato":8,"ids":9,"valores":10,"tvoid":11,"tmain":12,"para":13,"parc":14,"llavea":15,"llavec":16,"id":17,"parametro":18,"funcion":19,"param":20,"help":21,"puntocoma":22,"coma":23,"EXP":24,"parametrox":25,"cuerpovoidx":26,"tif":27,"condicion":28,"elses":29,"twhile":30,"tdo":31,"tfor":32,"idfor":33,"cambioid":34,"tswitch":35,"casos":36,"tprint":37,"tcontinue":38,"tbreak":39,"treturn":40,"treturnc":41,"nuevocaso":42,"tcase":43,"dospuntos":44,"cuerpocase":45,"tdefault":46,"cuerpocasex":47,"tprintln":48,"taumen":49,"tdecren":50,"telse":51,"tipodeelse":52,"tmayor":53,"tmayori":54,"tmenor":55,"tmenori":56,"igualdad":57,"noigualdad":58,"tand":59,"tor":60,"tnot":61,"tint":62,"tstring":63,"tbool":64,"tchar":65,"tdouble":66,"idr":67,"tigual":68,"tresta":69,"entero":70,"tdiv":71,"tmul":72,"tsuma":73,"decimal":74,"char":75,"cadena":76,"HTML":77,"ttrue":78,"tfalse":79,"idx":80,"idex":81,"idxr":82,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",11:"tvoid",12:"tmain",13:"para",14:"parc",15:"llavea",16:"llavec",17:"id",22:"puntocoma",23:"coma",27:"tif",30:"twhile",31:"tdo",32:"tfor",35:"tswitch",37:"tprint",38:"tcontinue",39:"tbreak",40:"treturn",43:"tcase",44:"dospuntos",46:"tdefault",48:"tprintln",49:"taumen",50:"tdecren",51:"telse",53:"tmayor",54:"tmayori",55:"tmenor",56:"tmenori",57:"igualdad",58:"noigualdad",59:"tand",60:"tor",61:"tnot",62:"tint",63:"tstring",64:"tbool",65:"tchar",66:"tdouble",68:"tigual",69:"tresta",70:"entero",71:"tdiv",72:"tmul",73:"tsuma",74:"decimal",75:"char",76:"cadena",77:"HTML",78:"ttrue",79:"tfalse"},
productions_: [0,[3,2],[6,2],[6,1],[7,3],[7,1],[7,7],[7,8],[7,1],[19,5],[19,3],[21,1],[21,0],[20,3],[20,1],[20,0],[20,1],[20,1],[18,3],[18,1],[18,0],[25,2],[25,1],[4,2],[4,1],[4,0],[26,8],[26,3],[26,2],[26,7],[26,9],[26,11],[26,7],[26,5],[26,7],[26,8],[26,2],[26,2],[26,2],[26,1],[36,2],[36,1],[42,4],[42,3],[42,1],[45,2],[45,1],[47,8],[47,3],[47,2],[47,7],[47,9],[47,11],[47,7],[47,5],[47,5],[47,2],[47,2],[47,2],[47,1],[41,2],[41,1],[34,1],[34,1],[33,3],[33,2],[33,1],[29,2],[29,0],[52,3],[52,8],[52,1],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,2],[28,1],[28,3],[28,1],[8,1],[8,1],[8,1],[8,1],[8,1],[9,3],[9,1],[67,1],[67,1],[10,1],[10,3],[10,2],[10,2],[10,2],[24,3],[24,2],[24,3],[24,3],[24,3],[24,3],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,4],[80,1],[80,0],[81,3],[81,1],[82,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3:
 this.$ = [$$[$0]]; 
break;
case 4: case 27: case 48: case 64:
this.$=instruccionesAPI.declaracion($$[$0-2],$$[$0-1],$$[$0]);
break;
case 5: case 62: case 63: case 113:
this.$=$$[$0]
break;
case 6: case 34:
 this.$= instruccionesAPI.funcionmain($$[$0-1]);
break;
case 7: case 35:
 this.$= instruccionesAPI.funcionvoid($$[$0-6],$$[$0-4],$$[$0-1]);
break;
case 8:
 this.$=instruccionesAPI.nuevoError($$[$0]); CErrores.errores.addError(new CNodoError.nodoError("SINTACTICO","No se esperaba el token: "+yytext,this._$.first_line,this._$.first_column));  
break;
case 9:
 this.$= instruccionesAPI.funcion($$[$0-4],$$[$0-1]);
break;
case 10:
 this.$= instruccionesAPI.nuevaLlamada($$[$0-2]);
break;
case 13:
$$[$0-2].push($$[$0]) ; this.$=$$[$0-2];
break;
case 14: case 19: case 24: case 41: case 46: case 90: case 116:
this.$=[$$[$0]];
break;
case 15: case 20: case 61: case 68:
this.$="";
break;
case 16:
this.$=instruccionesAPI.param($$[$0]); 
break;
case 17: case 22: case 39: case 44: case 59: case 66: case 71: case 83: case 92:
 this.$=instruccionesAPI.nuevoError($$[$0]); CErrores.errores.addError(new CNodoError.nodoError("SINTACTICO","No se esperaba el token: "+yytext,this._$.first_line,yytext));  
break;
case 18: case 89: case 115:
 $$[$0-2].push($$[$0]) ; this.$=$$[$0-2];
break;
case 21:
this.$=instruccionesAPI.parametro($$[$0-1],$$[$0]); 
break;
case 23: case 40: case 45:
$$[$0-1].push($$[$0]);this.$=$$[$0-1];
break;
case 25:
this.$ = "" 
break;
case 26: case 47: case 70:
 this.$=instruccionesAPI.nuevoif($$[$0-5],$$[$0-2],$$[$0]); 
break;
case 28: case 49: case 65:
this.$=instruccionesAPI.variable($$[$0-1],$$[$0]);
break;
case 29: case 50:
 this.$=instruccionesAPI.nuevowhile($$[$0-4],$$[$0-1]); 
break;
case 30: case 51:
 this.$=instruccionesAPI.nuevodo($$[$0-6],$$[$0-2]);
break;
case 31:
 this.$=instruccionesAPI.nuevofor($$[$0-8],$$[$0-7],$$[$0-5],$$[$0-4],$$[$0-1]);
break;
case 32: case 53:
this.$=instruccionesAPI.nuevoswitch($$[$0-4],$$[$0-1]);
break;
case 33: case 54:
 this.$= instruccionesAPI.nuevoprint ($$[$0-2]);
break;
case 36: case 37: case 38: case 58:
this.$=$$[$0-1]
break;
case 42:
this.$=instruccionesAPI.nuevocase($$[$0-2],$$[$0]);
break;
case 43:
this.$=instruccionesAPI.nuevodefcase($$[$0]);
break;
case 52:
 this.$=instruccionesAPI.nuevofor($$[$0-8],$$[$0-7],$$[$0-4],$$[$0-1]);
break;
case 55:
 this.$= instruccionesAPI.nuevoprintln ($$[$0-2]);
break;
case 56:
this.$=instruccionesAPI.nuevocontinue();
break;
case 57:
this.$=instruccionesAPI.nuevoreturn($$[$0]);
break;
case 60: case 82: case 94:
this.$=$$[$0-1];
break;
case 67:
 this.$=$$[$0];
break;
case 69:
this.$= instruccionesAPI.nuevoelse($$[$0-1]);
break;
case 72:
  this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYORQUE); 
break;
case 73:
  this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYORIGUAL); 
break;
case 74:
  this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENORQUE); 
break;
case 75:
  this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENORIGUAL); 
break;
case 76:
  this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DIGUAL); 
break;
case 77:
  this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.NOIGUAL); 
break;
case 78:
  this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.AND); 
break;
case 79:
  this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.OR); 
break;
case 80:
   this.$=instruccionesAPI.nuevonot($$[$0]);
break;
case 81: case 95:
this.$=$$[$0];
break;
case 84:
this.$=TIPO_VALOR.INT;
break;
case 85:
this.$=TIPO_VALOR.STRING;
break;
case 86:
this.$=TIPO_VALOR.BOOL;
break;
case 87:
this.$=TIPO_VALOR.CHAR;
break;
case 88:
this.$=TIPO_VALOR.DOUBLE;
break;
case 91:
this.$=instruccionesAPI.nuevoid(this.$=$$[$0]);
break;
case 93:
this.$=" ";
break;
case 96: case 97:
this.$=1
break;
case 98:
  this.$=$$[$0-1]; 
break;
case 99:
  this.$ = instruccionesAPI.nuevoValor(Number($$[$0]), TIPO_VALOR.NUMERONEG);  
break;
case 100:
  this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DIVISION); 
break;
case 101:
  this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MULTIPLICACION); 
break;
case 102:
  this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.SUMA); 
break;
case 103:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.RESTA); 
break;
case 104:
 this.$ = instruccionesAPI.nuevoValor(Number($$[$0]), TIPO_VALOR.NUMERO); 
break;
case 105:
  this.$ = instruccionesAPI.nuevoValor(Number($$[$0]), TIPO_VALOR.NUMERO);  
break;
case 106:
  this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.CHAR);  
break;
case 107:
  this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.ID);  
break;
case 108:
  this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.CADENA);  
break;
case 109:
  this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.HTML);  
break;
case 110: case 111:
  this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.BOOL);  
break;
case 112:
  this.$ = instruccionesAPI.nuevalorfunc($$[$0-3],$$[$0-1]);  
break;
case 114:
""
break;
case 117:
this.$=instruccionesAPI.nuevoid($$[$0]);
break;
}
},
table: [{2:$V0,3:1,4:2,5:$V1,8:5,11:$V2,17:$V3,26:3,27:$V4,30:$V5,31:$V6,32:$V7,35:$V8,37:$V9,38:$Va,39:$Vb,40:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh},{1:[3]},{2:$V0,5:[1,22],8:5,11:$V2,17:$V3,26:23,27:$V4,30:$V5,31:$V6,32:$V7,35:$V8,37:$V9,38:$Va,39:$Vb,40:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh},o($Vi,[2,24]),{13:[1,24]},{2:$Vj,9:25,17:$Vk,67:26},{10:29,13:$Vl,22:$Vm,49:$Vn,50:$Vo,68:$Vp},{13:[1,35]},{15:[1,36]},{13:[1,37]},{13:[1,38]},{13:[1,39]},{12:[1,40],17:[1,41]},{22:[1,42]},{22:[1,43]},{13:$Vq,17:$Vr,22:$Vs,24:45,41:44,69:$Vt,70:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA},o($Vi,[2,39]),o($VB,[2,84]),o($VB,[2,85]),o($VB,[2,86]),o($VB,[2,87]),o($VB,[2,88]),{1:[2,1]},o($Vi,[2,23]),{2:$VC,13:$VD,17:$Vr,24:59,28:57,61:$VE,69:$Vt,70:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA},{10:62,13:$Vl,22:$Vm,23:$VF,49:$Vn,50:$Vo,68:$Vp},o($VG,[2,90]),o($VG,[2,91]),o($VG,[2,92]),o($Vi,[2,28]),o($VH,[2,93]),{13:$Vq,17:$Vr,24:64,69:$Vt,70:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA},o($VI,$VJ,{19:65,18:66,20:67,25:68,24:69,8:71,2:[1,70],13:$Vq,17:$Vr,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,69:$Vt,70:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA}),{22:[1,72]},{22:[1,73]},{2:$VC,13:$VD,17:$Vr,24:59,28:74,61:$VE,69:$Vt,70:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA},{2:$V0,4:75,8:5,11:$V2,16:$V1,17:$V3,26:3,27:$V4,30:$V5,31:$V6,32:$V7,35:$V8,37:$V9,38:$Va,39:$Vb,40:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh},{2:$VK,8:77,17:$VL,33:76,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh},{13:$Vq,17:$Vr,24:80,69:$Vt,70:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA},{13:$Vq,17:$Vr,24:81,69:$Vt,70:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA},{13:[1,82]},{13:[1,83]},o($Vi,[2,36]),o($Vi,[2,37]),o($Vi,[2,38]),{22:[1,84],69:$VM,71:$VN,72:$VO,73:$VP},o($VQ,[2,61]),{13:$Vq,17:$Vr,24:89,69:$Vt,70:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA},{70:[1,90]},o($VR,[2,104]),o($VR,[2,105]),o($VR,[2,106]),o($VR,[2,107],{13:[1,91]}),o($VR,[2,108]),o($VR,[2,109]),o($VR,[2,110]),o($VR,[2,111]),{14:[1,92],53:$VS,54:$VT,55:$VU,56:$VV,57:$VW,58:$VX,59:$VY,60:$VZ},{2:$VC,13:$VD,17:$Vr,24:59,28:101,61:$VE,69:$Vt,70:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA},o($V_,$V$,{69:$VM,71:$VN,72:$VO,73:$VP}),{2:$VC,13:$VD,17:$Vr,24:103,28:102,61:$VE,69:$Vt,70:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA},o($V_,[2,83]),o($Vi,[2,27]),{2:$Vj,17:$Vk,67:104},{22:[1,105],69:$VM,71:$VN,72:$VO,73:$VP},o($VH,[2,95]),{14:[1,106],23:$V01},{14:[1,108],23:[1,109]},o($VI,[2,19]),o($VI,[2,14],{69:$VM,71:$VN,72:$VO,73:$VP}),o($VI,$VB),{17:[1,110]},o($VH,[2,96]),o($VH,[2,97]),{14:[1,111],53:$VS,54:$VT,55:$VU,56:$VV,57:$VW,58:$VX,59:$VY,60:$VZ},{2:$V0,8:5,11:$V2,16:[1,112],17:$V3,26:23,27:$V4,30:$V5,31:$V6,32:$V7,35:$V8,37:$V9,38:$Va,39:$Vb,40:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh},{2:$VC,13:$VD,17:$Vr,24:59,28:113,61:$VE,69:$Vt,70:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA},{2:$Vj,9:114,17:$Vk,67:26},{10:115,13:$Vl,22:$Vm,49:$Vn,50:$Vo,68:$Vp},o($V11,[2,66]),{14:[1,116],69:$VM,71:$VN,72:$VO,73:$VP},{14:[1,117],69:$VM,71:$VN,72:$VO,73:$VP},{14:[1,118]},o($VI,$VJ,{25:68,8:71,18:119,2:$V21,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh}),o($VQ,[2,60]),{13:$Vq,17:$Vr,24:121,69:$Vt,70:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA},{13:$Vq,17:$Vr,24:122,69:$Vt,70:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA},{13:$Vq,17:$Vr,24:123,69:$Vt,70:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA},{13:$Vq,17:$Vr,24:124,69:$Vt,70:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA},{14:$V31,69:$VM,71:$VN,72:$VO,73:$VP},o($VR,[2,99]),{2:$VC,13:$VD,14:[2,114],17:$Vr,24:59,28:129,61:$VE,69:$Vt,70:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:126,81:127,82:128},{15:[1,130]},{2:$VC,13:$VD,17:$Vr,24:59,28:131,61:$VE,69:$Vt,70:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA},{2:$VC,13:$VD,17:$Vr,24:59,28:132,61:$VE,69:$Vt,70:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA},{2:$VC,13:$VD,17:$Vr,24:59,28:133,61:$VE,69:$Vt,70:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA},{2:$VC,13:$VD,17:$Vr,24:59,28:134,61:$VE,69:$Vt,70:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA},{2:$VC,13:$VD,17:$Vr,24:59,28:135,61:$VE,69:$Vt,70:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA},{2:$VC,13:$VD,17:$Vr,24:59,28:136,61:$VE,69:$Vt,70:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA},{2:$VC,13:$VD,17:$Vr,24:59,28:137,61:$VE,69:$Vt,70:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA},{2:$VC,13:$VD,17:$Vr,24:59,28:138,61:$VE,69:$Vt,70:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA},o($V_,[2,80]),{14:[1,139],53:$VS,54:$VT,55:$VU,56:$VV,57:$VW,58:$VX,59:$VY,60:$VZ},o([53,54,55,56,57,58,59,60],$V$,{14:$V31,69:$VM,71:$VN,72:$VO,73:$VP}),o($VG,[2,89]),o($VH,[2,94]),{15:[1,140]},{2:$V21,8:71,25:141,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh},o($VH,[2,12],{21:142,22:[1,143]}),{13:$Vq,17:$Vr,24:144,69:$Vt,70:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA},o($VI,[2,21]),{15:[1,145]},{30:[1,146]},{22:[1,147],53:$VS,54:$VT,55:$VU,56:$VV,57:$VW,58:$VX,59:$VY,60:$VZ},{10:148,13:$Vl,22:$Vm,23:$VF,49:$Vn,50:$Vo,68:$Vp},o($V11,[2,65]),{15:[1,149]},{22:[1,150]},{15:[1,151]},{14:[1,152],23:$V01},o($VI,[2,22]),o($VR,[2,100]),o($VR,[2,101]),o($V41,[2,102],{71:$VN,72:$VO}),o($V41,[2,103],{71:$VN,72:$VO}),o($VR,[2,98]),{14:[1,153]},{14:[2,113],23:[1,154]},o($VI,[2,116]),o($VI,[2,117],{53:$VS,54:$VT,55:$VU,56:$VV,57:$VW,58:$VX,59:$VY,60:$VZ}),{2:$V0,4:155,8:5,11:$V2,16:$V1,17:$V3,26:3,27:$V4,30:$V5,31:$V6,32:$V7,35:$V8,37:$V9,38:$Va,39:$Vb,40:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh},o($V51,[2,72],{54:$VT,56:$VV,59:$VY,60:$VZ}),o($V61,[2,73],{59:$VY,60:$VZ}),o($V51,[2,74],{54:$VT,56:$VV,59:$VY,60:$VZ}),o($V61,[2,75],{59:$VY,60:$VZ}),o($V71,[2,76],{53:$VS,54:$VT,55:$VU,56:$VV,59:$VY,60:$VZ}),o($V71,[2,77],{53:$VS,54:$VT,55:$VU,56:$VV,59:$VY,60:$VZ}),o($V_,[2,78]),o($V_,[2,79]),o($V_,[2,82]),{2:$V0,4:156,8:5,11:$V2,16:$V1,17:$V3,26:3,27:$V4,30:$V5,31:$V6,32:$V7,35:$V8,37:$V9,38:$Va,39:$Vb,40:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh},o($VI,[2,18]),o($VH,[2,10]),o($VH,[2,11]),o($VI,[2,13],{69:$VM,71:$VN,72:$VO,73:$VP}),{2:$V0,4:157,8:5,11:$V2,16:$V1,17:$V3,26:3,27:$V4,30:$V5,31:$V6,32:$V7,35:$V8,37:$V9,38:$Va,39:$Vb,40:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh},{13:[1,158]},{17:[1,159]},o($V11,[2,64]),{2:$V81,36:160,42:161,43:$V91,46:$Va1},o($Vi,[2,33]),{2:$V0,4:165,8:5,11:$V2,16:$V1,17:$V3,26:3,27:$V4,30:$V5,31:$V6,32:$V7,35:$V8,37:$V9,38:$Va,39:$Vb,40:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh},{15:[1,166]},o($VR,[2,112]),{2:$VC,13:$VD,17:$Vr,24:59,28:129,61:$VE,69:$Vt,70:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,82:167},{2:$V0,8:5,11:$V2,16:[1,168],17:$V3,26:23,27:$V4,30:$V5,31:$V6,32:$V7,35:$V8,37:$V9,38:$Va,39:$Vb,40:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh},{2:$V0,8:5,11:$V2,16:[1,169],17:$V3,26:23,27:$V4,30:$V5,31:$V6,32:$V7,35:$V8,37:$V9,38:$Va,39:$Vb,40:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh},{2:$V0,8:5,11:$V2,16:[1,170],17:$V3,26:23,27:$V4,30:$V5,31:$V6,32:$V7,35:$V8,37:$V9,38:$Va,39:$Vb,40:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh},{2:$VC,13:$VD,17:$Vr,24:59,28:171,61:$VE,69:$Vt,70:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA},{34:172,49:$Vb1,50:$Vc1},{2:$V81,16:[1,175],42:176,43:$V91,46:$Va1},o($Vd1,[2,41]),{13:$Vq,17:$Vr,24:177,69:$Vt,70:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA},{44:[1,178]},o($Vd1,[2,44]),{2:$V0,8:5,11:$V2,16:[1,179],17:$V3,26:23,27:$V4,30:$V5,31:$V6,32:$V7,35:$V8,37:$V9,38:$Va,39:$Vb,40:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh},{2:$V0,4:180,8:5,11:$V2,16:$V1,17:$V3,26:3,27:$V4,30:$V5,31:$V6,32:$V7,35:$V8,37:$V9,38:$Va,39:$Vb,40:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh},o($VI,[2,115]),o($Vi,$Ve1,{29:181,51:$Vf1}),o($VH,[2,9]),o($Vi,[2,29]),{14:[1,183],53:$VS,54:$VT,55:$VU,56:$VV,57:$VW,58:$VX,59:$VY,60:$VZ},{14:[1,184]},{14:[2,62]},{14:[2,63]},o($Vi,[2,32]),o($Vd1,[2,40]),{44:[1,185],69:$VM,71:$VN,72:$VO,73:$VP},{2:$Vg1,8:189,17:$Vh1,27:$Vi1,30:$Vj1,31:$Vk1,32:$Vl1,35:$Vm1,37:$Vn1,38:$Vo1,39:$Vp1,40:$Vq1,45:186,47:187,48:$Vr1,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh},o($Vi,[2,34]),{2:$V0,8:5,11:$V2,16:[1,201],17:$V3,26:23,27:$V4,30:$V5,31:$V6,32:$V7,35:$V8,37:$V9,38:$Va,39:$Vb,40:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh},o($Vi,[2,26]),{2:[1,205],15:[1,203],27:[1,204],52:202},{22:[1,206]},{15:[1,207]},{2:$Vg1,8:189,17:$Vh1,27:$Vi1,30:$Vj1,31:$Vk1,32:$Vl1,35:$Vm1,37:$Vn1,38:$Vo1,39:$Vp1,40:$Vq1,45:208,47:187,48:$Vr1,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh},o($Vs1,[2,43],{8:189,47:209,2:$Vg1,17:$Vh1,27:$Vi1,30:$Vj1,31:$Vk1,32:$Vl1,35:$Vm1,37:$Vn1,38:$Vo1,39:$Vp1,40:$Vq1,48:$Vr1,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh}),o($Vt1,[2,46]),{13:[1,210]},{2:$Vj,9:211,17:$Vk,67:26},{10:212,13:$Vl,22:$Vm,49:$Vn,50:$Vo,68:$Vp},{13:[1,213]},{15:[1,214]},{13:[1,215]},{13:[1,216]},{13:[1,217]},{13:[1,218]},{22:[1,219]},{13:$Vq,17:$Vr,22:$Vs,24:45,41:220,69:$Vt,70:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA},{22:[1,221]},o($Vt1,[2,59]),o($Vi,[2,35]),o($VQ,[2,67]),{2:$V0,4:222,8:5,11:$V2,16:$V1,17:$V3,26:3,27:$V4,30:$V5,31:$V6,32:$V7,35:$V8,37:$V9,38:$Va,39:$Vb,40:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh},{13:[1,223]},o($VQ,[2,71]),o($Vi,[2,30]),{2:$V0,4:224,8:5,11:$V2,16:$V1,17:$V3,26:3,27:$V4,30:$V5,31:$V6,32:$V7,35:$V8,37:$V9,38:$Va,39:$Vb,40:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh},o($Vs1,[2,42],{8:189,47:209,2:$Vg1,17:$Vh1,27:$Vi1,30:$Vj1,31:$Vk1,32:$Vl1,35:$Vm1,37:$Vn1,38:$Vo1,39:$Vp1,40:$Vq1,48:$Vr1,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh}),o($Vt1,[2,45]),{2:$VC,13:$VD,17:$Vr,24:59,28:225,61:$VE,69:$Vt,70:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA},{10:226,13:$Vl,22:$Vm,23:$VF,49:$Vn,50:$Vo,68:$Vp},o($Vt1,[2,49]),{2:$VC,13:$VD,17:$Vr,24:59,28:227,61:$VE,69:$Vt,70:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA},{2:$Vu1,4:231,6:228,7:229,8:230,11:$Vv1,16:$V1,17:$V3,26:3,27:$V4,30:$V5,31:$V6,32:$V7,35:$V8,37:$V9,38:$Va,39:$Vb,40:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh},{2:$VK,8:77,17:$VL,33:234,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh},{13:$Vq,17:$Vr,24:235,69:$Vt,70:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA},{13:$Vq,17:$Vr,24:236,69:$Vt,70:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA},{13:$Vq,17:$Vr,24:237,69:$Vt,70:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA},o($Vt1,[2,56]),o($Vt1,[2,57]),o($Vt1,[2,58]),{2:$V0,8:5,11:$V2,16:[1,238],17:$V3,26:23,27:$V4,30:$V5,31:$V6,32:$V7,35:$V8,37:$V9,38:$Va,39:$Vb,40:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh},{2:$VC,13:$VD,17:$Vr,24:59,28:239,61:$VE,69:$Vt,70:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA},{2:$V0,8:5,11:$V2,16:[1,240],17:$V3,26:23,27:$V4,30:$V5,31:$V6,32:$V7,35:$V8,37:$V9,38:$Va,39:$Vb,40:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh},{14:[1,241],53:$VS,54:$VT,55:$VU,56:$VV,57:$VW,58:$VX,59:$VY,60:$VZ},o($Vt1,[2,48]),{14:[1,242],53:$VS,54:$VT,55:$VU,56:$VV,57:$VW,58:$VX,59:$VY,60:$VZ},{2:$Vu1,4:231,7:244,8:230,11:$Vv1,16:[1,243],17:$V3,26:3,27:$V4,30:$V5,31:$V6,32:$V7,35:$V8,37:$V9,38:$Va,39:$Vb,40:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh},o($Vw1,[2,3]),{2:$Vj,9:245,17:$Vk,67:26},{2:$V0,8:5,11:$V2,16:[2,5],17:$V3,26:23,27:$V4,30:$V5,31:$V6,32:$V7,35:$V8,37:$V9,38:$Va,39:$Vb,40:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh},{12:[1,246],17:[1,247]},o($Vw1,[2,8]),{2:$VC,13:$VD,17:$Vr,24:59,28:248,61:$VE,69:$Vt,70:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA},{14:[1,249],69:$VM,71:$VN,72:$VO,73:$VP},{14:[1,250],69:$VM,71:$VN,72:$VO,73:$VP},{14:[1,251],69:$VM,71:$VN,72:$VO,73:$VP},o($VQ,[2,69]),{14:[1,252],53:$VS,54:$VT,55:$VU,56:$VV,57:$VW,58:$VX,59:$VY,60:$VZ},o($Vi,[2,31]),{15:[1,253]},{15:[1,254]},{30:[1,255]},o($Vw1,[2,2]),{10:256,13:$Vl,22:$Vm,23:$VF,49:$Vn,50:$Vo,68:$Vp},{13:[1,257]},{13:[1,258]},{22:[1,259],53:$VS,54:$VT,55:$VU,56:$VV,57:$VW,58:$VX,59:$VY,60:$VZ},{16:[1,260]},{22:[1,261]},{22:[1,262]},{15:[1,263]},{2:$V0,4:264,8:5,11:$V2,16:$V1,17:$V3,26:3,27:$V4,30:$V5,31:$V6,32:$V7,35:$V8,37:$V9,38:$Va,39:$Vb,40:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh},{2:$V0,4:265,8:5,11:$V2,16:$V1,17:$V3,26:3,27:$V4,30:$V5,31:$V6,32:$V7,35:$V8,37:$V9,38:$Va,39:$Vb,40:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh},{13:[1,266]},o($Vw1,[2,4]),{14:[1,267]},o($VI,$VJ,{25:68,8:71,18:268,2:$V21,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh}),{17:[1,269]},{2:$V81,36:270,42:161,43:$V91,46:$Va1},o($Vt1,[2,54]),o($Vt1,[2,55]),{2:$V0,4:271,8:5,11:$V2,16:$V1,17:$V3,26:3,27:$V4,30:$V5,31:$V6,32:$V7,35:$V8,37:$V9,38:$Va,39:$Vb,40:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh},{2:$V0,8:5,11:$V2,16:[1,272],17:$V3,26:23,27:$V4,30:$V5,31:$V6,32:$V7,35:$V8,37:$V9,38:$Va,39:$Vb,40:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh},{2:$V0,8:5,11:$V2,16:[1,273],17:$V3,26:23,27:$V4,30:$V5,31:$V6,32:$V7,35:$V8,37:$V9,38:$Va,39:$Vb,40:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh},{2:$VC,13:$VD,17:$Vr,24:59,28:274,61:$VE,69:$Vt,70:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA},{15:[1,275]},{14:[1,276],23:$V01},{34:277,49:$Vb1,50:$Vc1},{2:$V81,15:[1,278],42:176,43:$V91,46:$Va1},{2:$V0,8:5,11:$V2,16:[1,279],17:$V3,26:23,27:$V4,30:$V5,31:$V6,32:$V7,35:$V8,37:$V9,38:$Va,39:$Vb,40:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh},o($Vt1,$Ve1,{29:280,51:$Vf1}),o($Vt1,[2,50]),{14:[1,281],53:$VS,54:$VT,55:$VU,56:$VV,57:$VW,58:$VX,59:$VY,60:$VZ},{2:$V0,4:282,8:5,11:$V2,16:$V1,17:$V3,26:3,27:$V4,30:$V5,31:$V6,32:$V7,35:$V8,37:$V9,38:$Va,39:$Vb,40:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh},{15:[1,283]},{14:[1,284]},o($Vt1,[2,53]),o($VQ,$Ve1,{29:285,51:$Vf1}),o($Vt1,[2,47]),{22:[1,286]},{2:$V0,8:5,11:$V2,16:[1,287],17:$V3,26:23,27:$V4,30:$V5,31:$V6,32:$V7,35:$V8,37:$V9,38:$Va,39:$Vb,40:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh},{2:$V0,4:288,8:5,11:$V2,16:$V1,17:$V3,26:3,27:$V4,30:$V5,31:$V6,32:$V7,35:$V8,37:$V9,38:$Va,39:$Vb,40:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh},{15:[1,289]},o($VQ,[2,70]),o($Vt1,[2,51]),o($Vw1,[2,6]),{2:$V0,8:5,11:$V2,16:[1,290],17:$V3,26:23,27:$V4,30:$V5,31:$V6,32:$V7,35:$V8,37:$V9,38:$Va,39:$Vb,40:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh},{2:$V0,4:291,8:5,11:$V2,16:$V1,17:$V3,26:3,27:$V4,30:$V5,31:$V6,32:$V7,35:$V8,37:$V9,38:$Va,39:$Vb,40:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh},o($Vw1,[2,7]),{2:$V0,8:5,11:$V2,16:[1,292],17:$V3,26:23,27:$V4,30:$V5,31:$V6,32:$V7,35:$V8,37:$V9,38:$Va,39:$Vb,40:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh},o($Vt1,[2,52])],
defaultActions: {22:[2,1],173:[2,62],174:[2,63]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	let TIPO_OPERACION	= require('./instrucciones').TIPO_OPERACION;
	let TIPO_VALOR 		= require('./instrucciones').TIPO_VALOR;
	let instruccionesAPI	= require('./instrucciones').instruccionesAPI;
        let CErrores=require('./errores');
        let CNodoError=require('./nodoError');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 63;
break;
case 4:return 62;
break;
case 5:return 64;
break;
case 6:return 65;
break;
case 7:return 66;
break;
case 8:return 50;
break;
case 9:return 49;
break;
case 10:return 57;
break;
case 11:return 68;
break;
case 12:return 73;
break;
case 13:return 69;
break;
case 14:return 72;
break;
case 15:return 71;
break;
case 16:return 54;
break;
case 17:return 56;
break;
case 18:return 58;
break;
case 19:return 53;
break;
case 20:return 55;
break;
case 21:return 59;
break;
case 22:return 60;
break;
case 23:return 37;
break;
case 24:return 38;
break;
case 25:return 61;
break;
case 26:return 27;
break;
case 27:return 51;
break;
case 28:return 35;
break;
case 29:return 43;
break;
case 30:return 46;
break;
case 31:return 30;
break;
case 32:return 31;
break;
case 33:return 32;
break;
case 34:return 39;
break;
case 35:return 40;
break;
case 36:return 12;
break;
case 37:return 11;
break;
case 38:return'ttrue';
break;
case 39:return'tfalse';
break;
case 40:return 44;
break;
case 41:return 22;
break;
case 42:return 23;
break;
case 43:return 15;
break;
case 44:return 16;
break;
case 45:return 13;
break;
case 46:return 14;
break;
case 47:   yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);return 75;   
break;
case 48: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 76; 
break;
case 49: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 77; 
break;
case 50:return 74;
break;
case 51:return 70;
break;
case 52:return 17;
break;
case 53: /*se ignoran*/ 
break;
case 54:return 5;
break;
case 55:CErrores.errores.addError(new CNodoError.nodoError("LEXICO","No se esperaba el caracter: "+yy_.yytext,yy_.yylineno,yy_.yytext))
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:string\b)/,/^(?:int\b)/,/^(?:bool\b)/,/^(?:char\b)/,/^(?:double\b)/,/^(?:--)/,/^(?:\+\+)/,/^(?:==)/,/^(?:=)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:>=)/,/^(?:<=)/,/^(?:!=)/,/^(?:>)/,/^(?:<)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:Console\.Write\b)/,/^(?:continue\b)/,/^(?:!)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:break\b)/,/^(?:return\b)/,/^(?:main\b)/,/^(?:void\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?::)/,/^(?:;)/,/^(?:,)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:[\'][^\'\n][\'])/,/^(?:"[^\"]*")/,/^(?:'[^\']*')/,/^(?:[0-9]+(\.[0-9]+)\b)/,/^(?:[0-9]+\b)/,/^(?:([a-zA-Z_])[a-zA-Z0-9_]*)/,/^(?:[ \t\r\n\f])/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Gramatica;
exports.Parser = Gramatica.Parser;
exports.parse = function () { return Gramatica.parse.apply(Gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}