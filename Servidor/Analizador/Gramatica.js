/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,9],$V1=[2,18],$V2=[1,5],$V3=[1,7],$V4=[1,8],$V5=[1,15],$V6=[1,16],$V7=[1,17],$V8=[1,18],$V9=[1,19],$Va=[1,20],$Vb=[1,21],$Vc=[1,22],$Vd=[1,23],$Ve=[1,10],$Vf=[1,11],$Vg=[1,12],$Vh=[1,13],$Vi=[2,5,10,12,16,17,23,26,27,29,32,35,36,37,38,60,61,62,63],$Vj=[1,29],$Vk=[1,28],$Vl=[1,33],$Vm=[1,31],$Vn=[1,34],$Vo=[1,35],$Vp=[1,32],$Vq=[1,39],$Vr=[1,38],$Vs=[2,10],$Vt=[1,57],$Vu=[1,53],$Vv=[1,52],$Vw=[1,54],$Vx=[1,56],$Vy=[1,55],$Vz=[1,58],$VA=[1,59],$VB=[1,60],$VC=[1,61],$VD=[1,63],$VE=[13,20,28,47,48,65],$VF=[2,5,10,12,13,16,17,23,26,27,29,32,35,36,37,38,46,59,60,61,62,63,66,67,71,72,73,74,75],$VG=[14,20],$VH=[2,13],$VI=[1,69],$VJ=[1,80],$VK=[1,79],$VL=[1,77],$VM=[1,86],$VN=[1,85],$VO=[1,93],$VP=[1,90],$VQ=[1,91],$VR=[1,92],$VS=[2,5,10,12,16,17,23,26,27,29,32,35,36,37,38,46,60,61,62,63],$VT=[14,20,28,42,51,52,53,54,55,56,57,58,66,68,69,70],$VU=[1,100],$VV=[1,106],$VW=[1,107],$VX=[1,108],$VY=[1,109],$VZ=[1,110],$V_=[1,111],$V$=[1,112],$V01=[1,113],$V11=[14,20,28,51,52,53,54,55,56,57,58],$V21=[2,71],$V31=[2,10,13,59,66,67,71,72,73,74,75],$V41=[1,128],$V51=[14,20,28,42,51,52,53,54,55,56,57,58,66,70],$V61=[14,20,28,51,53,55,56],$V71=[14,20,28,51,52,53,54,55,56],$V81=[14,20,28,55,56],$V91=[1,166],$Va1=[1,164],$Vb1=[1,165],$Vc1=[1,174],$Vd1=[1,175],$Ve1=[2,15,16,41,44],$Vf1=[2,58],$Vg1=[1,182],$Vh1=[1,199],$Vi1=[1,190],$Vj1=[1,188],$Vk1=[1,191],$Vl1=[1,192],$Vm1=[1,193],$Vn1=[1,194],$Vo1=[1,195],$Vp1=[1,197],$Vq1=[1,198],$Vr1=[1,196],$Vs1=[2,10,23,26,27,29,32,35,36,37,38,46,60,61,62,63];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"cuerpo":4,"EOF":5,"cuerpoc":6,"tipoDato":7,"ids":8,"valores":9,"id":10,"cuerpovoid":11,"tmain":12,"para":13,"parc":14,"llavea":15,"llavec":16,"tvoid":17,"parametro":18,"funcion":19,"coma":20,"parametrox":21,"cuerpovoidx":22,"tif":23,"condicion":24,"elses":25,"twhile":26,"tdo":27,"puntocoma":28,"tfor":29,"idfor":30,"cambioid":31,"tswitch":32,"EXP":33,"casos":34,"tprint":35,"tcontinue":36,"tbreak":37,"treturn":38,"treturnc":39,"nuevocaso":40,"tcase":41,"dospuntos":42,"cuerpocase":43,"tdefault":44,"cuerpocasex":45,"tprintln":46,"taumen":47,"tdecren":48,"telse":49,"tipodeelse":50,"tmayor":51,"tmayori":52,"tmenor":53,"tmenori":54,"igualdad":55,"noigualdad":56,"tand":57,"tor":58,"tnot":59,"tint":60,"tstring":61,"tboolean":62,"tdouble":63,"idr":64,"tigual":65,"tresta":66,"entero":67,"tdiv":68,"tmul":69,"tsuma":70,"decimal":71,"cadena":72,"HTML":73,"ttrue":74,"tfalse":75,"idx":76,"idex":77,"idxr":78,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"id",12:"tmain",13:"para",14:"parc",15:"llavea",16:"llavec",17:"tvoid",20:"coma",23:"tif",26:"twhile",27:"tdo",28:"puntocoma",29:"tfor",32:"tswitch",35:"tprint",36:"tcontinue",37:"tbreak",38:"treturn",41:"tcase",42:"dospuntos",44:"tdefault",46:"tprintln",47:"taumen",48:"tdecren",49:"telse",51:"tmayor",52:"tmayori",53:"tmenor",54:"tmenori",55:"igualdad",56:"noigualdad",57:"tand",58:"tor",59:"tnot",60:"tint",61:"tstring",62:"tboolean",63:"tdouble",65:"tigual",66:"tresta",67:"entero",68:"tdiv",69:"tmul",70:"tsuma",71:"decimal",72:"cadena",73:"HTML",74:"ttrue",75:"tfalse"},
productions_: [0,[3,2],[4,2],[4,1],[6,3],[6,2],[6,1],[6,6],[6,8],[6,1],[19,5],[18,3],[18,1],[18,0],[21,2],[21,1],[11,2],[11,1],[11,0],[22,8],[22,3],[22,2],[22,7],[22,9],[22,11],[22,7],[22,5],[22,2],[22,2],[22,2],[22,1],[34,2],[34,1],[40,6],[40,5],[40,1],[43,2],[43,1],[45,8],[45,3],[45,2],[45,7],[45,9],[45,11],[45,7],[45,5],[45,5],[45,2],[45,2],[45,1],[39,2],[39,1],[31,1],[31,1],[30,3],[30,2],[30,1],[25,2],[25,0],[50,3],[50,8],[50,1],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,2],[24,1],[24,3],[24,1],[7,1],[7,1],[7,1],[7,1],[8,3],[8,1],[64,1],[64,1],[9,1],[9,3],[9,2],[9,2],[9,2],[33,3],[33,2],[33,3],[33,3],[33,3],[33,3],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,4],[76,1],[76,0],[77,3],[77,1],[78,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3:
 this.$ = [$$[$0]]; 
break;
case 4: case 20: case 39: case 54:
this.$=instruccionesAPI.declaracion($$[$0-2],$$[$0-1],$$[$0]);
break;
case 5: case 21: case 40: case 55:
this.$=instruccionesAPI.variable($$[$0-1],$$[$0]);
break;
case 6: case 52: case 53: case 101:
this.$=$$[$0]
break;
case 7:
 this.$= instruccionesAPI.funcionmain($$[$0-1]);
break;
case 8:
 this.$= instruccionesAPI.funcionvoid($$[$0-6],$$[$0-4],$$[$0-1]);
break;
case 9:
 this.$=instruccionesAPI.nuevoError($$[$0]); CErrores.errores.addError(new CNodoError.nodoError("SINTACTICO","No se esperaba el token: "+yytext,this._$.first_line,this._$.first_column));  
break;
case 10:
 this.$= instruccionesAPI.funcion($$[$0-4],$$[$0-1]);
break;
case 11: case 78: case 103:
 $$[$0-2].push($$[$0]) ; this.$=$$[$0-2];
break;
case 12: case 17: case 32: case 37: case 79: case 104:
this.$=[$$[$0]];
break;
case 13: case 51: case 58:
this.$="";
break;
case 14:
this.$=instruccionesAPI.parametro($$[$0-1],$$[$0]); 
break;
case 15: case 30: case 35: case 49: case 56: case 61: case 73: case 81:
 this.$=instruccionesAPI.nuevoError($$[$0]); CErrores.errores.addError(new CNodoError.nodoError("SINTACTICO","No se esperaba el token: "+yytext,this._$.first_line,yytext));  
break;
case 16: case 31: case 36:
$$[$0-1].push($$[$0]);this.$=$$[$0-1];
break;
case 18:
this.$ = "" 
break;
case 19: case 38: case 60:
 this.$=instruccionesAPI.nuevoif($$[$0-5],$$[$0-2],$$[$0]); 
break;
case 22: case 41:
 this.$=instruccionesAPI.nuevowhile($$[$0-4],$$[$0-1]); 
break;
case 23: case 42:
 this.$=instruccionesAPI.nuevodo($$[$0-6],$$[$0-2]);
break;
case 24: case 43:
 this.$=instruccionesAPI.nuevofor($$[$0-8],$$[$0-7],$$[$0-4],$$[$0-1]);
break;
case 25: case 44:
this.$=instruccionesAPI.nuevoswitch($$[$0-4],$$[$0-1]);
break;
case 26: case 45:
 this.$= instruccionesAPI.nuevoprint ($$[$0-2]);
break;
case 27: case 28:
this.$=$$[$0-1]
break;
case 29: case 48:
this.$=instruccionesAPI.nuevoreturn($$[$0]);
break;
case 33:
this.$=instruccionesAPI.nuevocase($$[$0-4],$$[$0-2]);
break;
case 34:
this.$=instruccionesAPI.nuevodefcase($$[$0-2]);
break;
case 46:
 this.$= instruccionesAPI.nuevoprintln ($$[$0-2]);
break;
case 47:
this.$=instruccionesAPI.nuevocontinue();
break;
case 50: case 72: case 83:
this.$=$$[$0-1];
break;
case 57:
 this.$=$$[$0];
break;
case 59:
this.$= instruccionesAPI.nuevoelse($$[$0-1]);
break;
case 62:
  this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYORQUE); 
break;
case 63:
  this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYORIGUAL); 
break;
case 64:
  this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENORQUE); 
break;
case 65:
  this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENORIGUAL); 
break;
case 66:
  this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DIGUAL); 
break;
case 67:
  this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.NOIGUAL); 
break;
case 68:
  this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.AND); 
break;
case 69:
  this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.OR); 
break;
case 70:
   this.$=instruccionesAPI.nuevonot($$[$0]);
break;
case 71: case 84:
this.$=$$[$0];
break;
case 74:
this.$=TIPO_VALOR.INT;
break;
case 75:
this.$=TIPO_VALOR.STRING;
break;
case 76:
this.$=TIPO_VALOR.BOOL;
break;
case 77:
this.$=TIPO_VALOR.DOUBLE;
break;
case 80:
this.$=instruccionesAPI.nuevoid(this.$=$$[$0]);
break;
case 82:
this.$=" ";
break;
case 85: case 86:
this.$=1
break;
case 87:
  this.$=$$[$0-1]; 
break;
case 88:
  this.$ = instruccionesAPI.nuevoValor(Number($$[$0]), TIPO_VALOR.NUMERONEG);  
break;
case 89:
  this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DIVISION); 
break;
case 90:
  this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MULTIPLICACION); 
break;
case 91:
  this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.SUMA); 
break;
case 92:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.RESTA); 
break;
case 93:
 this.$ = instruccionesAPI.nuevoValor(Number($$[$0]), TIPO_VALOR.NUMERO); 
break;
case 94:
  this.$ = instruccionesAPI.nuevoValor(Number($$[$0]), TIPO_VALOR.NUMERO);  
break;
case 95:
  this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.ID);  
break;
case 96:
  this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.CADENA);  
break;
case 97:
  this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.HTML);  
break;
case 98: case 99:
  this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.BOOL);  
break;
case 100:
  this.$ = instruccionesAPI.nuevalorfunc($$[$0-3],$$[$0-1]);  
break;
case 102:
""
break;
case 105:
this.$=instruccionesAPI.nuevoid($$[$0]);
break;
}
},
table: [{2:$V0,3:1,4:2,5:$V1,6:3,7:4,10:$V2,11:6,12:$V3,17:$V4,22:14,23:$V5,26:$V6,27:$V7,29:$V8,32:$V9,35:$Va,36:$Vb,37:$Vc,38:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},{1:[3]},{2:$V0,5:[1,24],6:25,7:4,10:$V2,11:6,12:$V3,17:$V4,22:14,23:$V5,26:$V6,27:$V7,29:$V8,32:$V9,35:$Va,36:$Vb,37:$Vc,38:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},o($Vi,[2,3]),{2:$Vj,8:26,10:$Vk,64:27},{9:30,13:$Vl,28:$Vm,47:$Vn,48:$Vo,65:$Vp},o([5,12,16,17],[2,6],{22:36,7:37,2:$Vq,10:$Vr,23:$V5,26:$V6,27:$V7,29:$V8,32:$V9,35:$Va,36:$Vb,37:$Vc,38:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh}),{13:[1,40]},{10:[1,41]},o($Vi,[2,9]),o($Vs,[2,74]),o($Vs,[2,75]),o($Vs,[2,76]),o($Vs,[2,77]),o($Vi,[2,17]),{13:[1,42]},{13:[1,43]},{15:[1,44]},{13:[1,45]},{13:[1,46]},{13:[1,47]},{28:[1,48]},{28:[1,49]},{10:$Vt,13:$Vu,28:$Vv,33:51,39:50,66:$Vw,67:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC},{1:[2,1]},o($Vi,[2,2]),{9:62,13:$Vl,20:$VD,28:$Vm,47:$Vn,48:$Vo,65:$Vp},o($VE,[2,79]),o($VE,[2,80]),o($VE,[2,81]),o($Vi,[2,5]),o($VF,[2,82]),{10:$Vt,13:$Vu,33:64,66:$Vw,67:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC},o($VG,$VH,{19:65,18:66,21:67,7:68,2:$VI,60:$Ve,61:$Vf,62:$Vg,63:$Vh}),{28:[1,70]},{28:[1,71]},o($Vi,[2,16]),{2:$Vj,8:72,10:$Vk,64:27},{9:73,13:$Vl,28:$Vm,47:$Vn,48:$Vo,65:$Vp},o($Vi,[2,30]),{14:[1,74]},{13:[1,75]},{2:$VJ,10:$Vt,13:$VK,24:76,33:78,59:$VL,66:$Vw,67:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC},{2:$VJ,10:$Vt,13:$VK,24:81,33:78,59:$VL,66:$Vw,67:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC},{2:$Vq,7:37,10:$Vr,11:82,16:$V1,22:14,23:$V5,26:$V6,27:$V7,29:$V8,32:$V9,35:$Va,36:$Vb,37:$Vc,38:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},{2:$VM,7:84,10:$VN,30:83,60:$Ve,61:$Vf,62:$Vg,63:$Vh},{10:$Vt,13:$Vu,33:87,66:$Vw,67:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC},{10:$Vt,13:$Vu,33:88,66:$Vw,67:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC},o($Vi,[2,27]),o($Vi,[2,28]),o($Vi,[2,29]),{28:[1,89],66:$VO,68:$VP,69:$VQ,70:$VR},o($VS,[2,51]),{10:$Vt,13:$Vu,33:94,66:$Vw,67:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC},{67:[1,95]},o($VT,[2,93]),o($VT,[2,94]),o($VT,[2,95],{13:[1,96]}),o($VT,[2,96]),o($VT,[2,97]),o($VT,[2,98]),o($VT,[2,99]),o($Vi,[2,4]),{2:$Vj,10:$Vk,64:97},{28:[1,98],66:$VO,68:$VP,69:$VQ,70:$VR},o($VF,[2,84]),{14:[1,99],20:$VU},o($VG,[2,12]),{10:[1,101]},o($VG,[2,15]),o($VF,[2,85]),o($VF,[2,86]),{9:102,13:$Vl,20:$VD,28:$Vm,47:$Vn,48:$Vo,65:$Vp},o($Vi,[2,21]),{15:[1,103]},o($VG,$VH,{21:67,7:68,18:104,2:$VI,60:$Ve,61:$Vf,62:$Vg,63:$Vh}),{14:[1,105],51:$VV,52:$VW,53:$VX,54:$VY,55:$VZ,56:$V_,57:$V$,58:$V01},{2:$VJ,10:$Vt,13:$VK,24:114,33:78,59:$VL,66:$Vw,67:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC},o($V11,$V21,{66:$VO,68:$VP,69:$VQ,70:$VR}),{2:$VJ,10:$Vt,13:$VK,24:115,33:116,59:$VL,66:$Vw,67:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC},o($V11,[2,73]),{14:[1,117],51:$VV,52:$VW,53:$VX,54:$VY,55:$VZ,56:$V_,57:$V$,58:$V01},{2:$Vq,7:37,10:$Vr,16:[1,118],22:36,23:$V5,26:$V6,27:$V7,29:$V8,32:$V9,35:$Va,36:$Vb,37:$Vc,38:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},{2:$VJ,10:$Vt,13:$VK,24:119,33:78,59:$VL,66:$Vw,67:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC},{2:$Vj,8:120,10:$Vk,64:27},{9:121,13:$Vl,28:$Vm,47:$Vn,48:$Vo,65:$Vp},o($V31,[2,56]),{14:[1,122],66:$VO,68:$VP,69:$VQ,70:$VR},{14:[1,123],66:$VO,68:$VP,69:$VQ,70:$VR},o($VS,[2,50]),{10:$Vt,13:$Vu,33:124,66:$Vw,67:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC},{10:$Vt,13:$Vu,33:125,66:$Vw,67:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC},{10:$Vt,13:$Vu,33:126,66:$Vw,67:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC},{10:$Vt,13:$Vu,33:127,66:$Vw,67:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC},{14:$V41,66:$VO,68:$VP,69:$VQ,70:$VR},o($VT,[2,88]),{2:$VJ,10:$Vt,13:$VK,14:[2,102],24:132,33:78,59:$VL,66:$Vw,67:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:129,77:130,78:131},o($VE,[2,78]),o($VF,[2,83]),{15:[1,133]},{2:$VI,7:68,21:134,60:$Ve,61:$Vf,62:$Vg,63:$Vh},o($VG,[2,14]),o($Vi,[2,20]),{2:$Vq,7:37,10:$Vr,11:135,16:$V1,22:14,23:$V5,26:$V6,27:$V7,29:$V8,32:$V9,35:$Va,36:$Vb,37:$Vc,38:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},{14:[1,136],20:$VU},{15:[1,137]},{2:$VJ,10:$Vt,13:$VK,24:138,33:78,59:$VL,66:$Vw,67:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC},{2:$VJ,10:$Vt,13:$VK,24:139,33:78,59:$VL,66:$Vw,67:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC},{2:$VJ,10:$Vt,13:$VK,24:140,33:78,59:$VL,66:$Vw,67:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC},{2:$VJ,10:$Vt,13:$VK,24:141,33:78,59:$VL,66:$Vw,67:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC},{2:$VJ,10:$Vt,13:$VK,24:142,33:78,59:$VL,66:$Vw,67:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC},{2:$VJ,10:$Vt,13:$VK,24:143,33:78,59:$VL,66:$Vw,67:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC},{2:$VJ,10:$Vt,13:$VK,24:144,33:78,59:$VL,66:$Vw,67:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC},{2:$VJ,10:$Vt,13:$VK,24:145,33:78,59:$VL,66:$Vw,67:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC},o($V11,[2,70]),{14:[1,146],51:$VV,52:$VW,53:$VX,54:$VY,55:$VZ,56:$V_,57:$V$,58:$V01},o([51,52,53,54,55,56,57,58],$V21,{14:$V41,66:$VO,68:$VP,69:$VQ,70:$VR}),{15:[1,147]},{26:[1,148]},{28:[1,149],51:$VV,52:$VW,53:$VX,54:$VY,55:$VZ,56:$V_,57:$V$,58:$V01},{9:150,13:$Vl,20:$VD,28:$Vm,47:$Vn,48:$Vo,65:$Vp},o($V31,[2,55]),{15:[1,151]},{28:[1,152]},o($VT,[2,89]),o($VT,[2,90]),o($V51,[2,91],{68:$VP,69:$VQ}),o($V51,[2,92],{68:$VP,69:$VQ}),o($VT,[2,87]),{14:[1,153]},{14:[2,101],20:[1,154]},o($VG,[2,104]),o($VG,[2,105],{51:$VV,52:$VW,53:$VX,54:$VY,55:$VZ,56:$V_,57:$V$,58:$V01}),{2:$Vq,7:37,10:$Vr,11:155,16:$V1,22:14,23:$V5,26:$V6,27:$V7,29:$V8,32:$V9,35:$Va,36:$Vb,37:$Vc,38:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},o($VG,[2,11]),{2:$Vq,7:37,10:$Vr,16:[1,156],22:36,23:$V5,26:$V6,27:$V7,29:$V8,32:$V9,35:$Va,36:$Vb,37:$Vc,38:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},{15:[1,157]},{2:$Vq,7:37,10:$Vr,11:158,16:$V1,22:14,23:$V5,26:$V6,27:$V7,29:$V8,32:$V9,35:$Va,36:$Vb,37:$Vc,38:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},o($V61,[2,62],{52:$VW,54:$VY,57:$V$,58:$V01}),o($V71,[2,63],{57:$V$,58:$V01}),o($V61,[2,64],{52:$VW,54:$VY,57:$V$,58:$V01}),o($V71,[2,65],{57:$V$,58:$V01}),o($V81,[2,66],{51:$VV,52:$VW,53:$VX,54:$VY,57:$V$,58:$V01}),o($V81,[2,67],{51:$VV,52:$VW,53:$VX,54:$VY,57:$V$,58:$V01}),o($V11,[2,68]),o($V11,[2,69]),o($V11,[2,72]),{2:$Vq,7:37,10:$Vr,11:159,16:$V1,22:14,23:$V5,26:$V6,27:$V7,29:$V8,32:$V9,35:$Va,36:$Vb,37:$Vc,38:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},{13:[1,160]},{10:[1,161]},o($V31,[2,54]),{2:$V91,34:162,40:163,41:$Va1,44:$Vb1},o($Vi,[2,26]),o($VT,[2,100]),{2:$VJ,10:$Vt,13:$VK,24:132,33:78,59:$VL,66:$Vw,67:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,78:167},{2:$Vq,7:37,10:$Vr,16:[1,168],22:36,23:$V5,26:$V6,27:$V7,29:$V8,32:$V9,35:$Va,36:$Vb,37:$Vc,38:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},o($Vi,[2,7]),{2:$Vq,7:37,10:$Vr,11:169,16:$V1,22:14,23:$V5,26:$V6,27:$V7,29:$V8,32:$V9,35:$Va,36:$Vb,37:$Vc,38:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},{2:$Vq,7:37,10:$Vr,16:[1,170],22:36,23:$V5,26:$V6,27:$V7,29:$V8,32:$V9,35:$Va,36:$Vb,37:$Vc,38:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},{2:$Vq,7:37,10:$Vr,16:[1,171],22:36,23:$V5,26:$V6,27:$V7,29:$V8,32:$V9,35:$Va,36:$Vb,37:$Vc,38:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},{2:$VJ,10:$Vt,13:$VK,24:172,33:78,59:$VL,66:$Vw,67:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC},{31:173,47:$Vc1,48:$Vd1},{2:$V91,16:[1,176],40:177,41:$Va1,44:$Vb1},o($Ve1,[2,32]),{10:$Vt,13:$Vu,33:178,66:$Vw,67:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC},{42:[1,179]},o($Ve1,[2,35]),o($VG,[2,103]),o($VF,$Vs),{2:$Vq,7:37,10:$Vr,16:[1,180],22:36,23:$V5,26:$V6,27:$V7,29:$V8,32:$V9,35:$Va,36:$Vb,37:$Vc,38:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},o($Vi,$Vf1,{25:181,49:$Vg1}),o($Vi,[2,22]),{14:[1,183],51:$VV,52:$VW,53:$VX,54:$VY,55:$VZ,56:$V_,57:$V$,58:$V01},{14:[1,184]},{14:[2,52]},{14:[2,53]},o($Vi,[2,25]),o($Ve1,[2,31]),{42:[1,185],66:$VO,68:$VP,69:$VQ,70:$VR},{2:$Vh1,7:189,10:$Vi1,23:$Vj1,26:$Vk1,27:$Vl1,29:$Vm1,32:$Vn1,35:$Vo1,36:$Vp1,38:$Vq1,43:186,45:187,46:$Vr1,60:$Ve,61:$Vf,62:$Vg,63:$Vh},o($Vi,[2,8]),o($Vi,[2,19]),{2:[1,203],15:[1,201],23:[1,202],50:200},{28:[1,204]},{15:[1,205]},{2:$Vh1,7:189,10:$Vi1,23:$Vj1,26:$Vk1,27:$Vl1,29:$Vm1,32:$Vn1,35:$Vo1,36:$Vp1,38:$Vq1,43:206,45:187,46:$Vr1,60:$Ve,61:$Vf,62:$Vg,63:$Vh},{2:$Vh1,7:189,10:$Vi1,23:$Vj1,26:$Vk1,27:$Vl1,29:$Vm1,32:$Vn1,35:$Vo1,36:$Vp1,37:[1,207],38:$Vq1,45:208,46:$Vr1,60:$Ve,61:$Vf,62:$Vg,63:$Vh},o($Vs1,[2,37]),{13:[1,209]},{2:$Vj,8:210,10:$Vk,64:27},{9:211,13:$Vl,28:$Vm,47:$Vn,48:$Vo,65:$Vp},{13:[1,212]},{15:[1,213]},{13:[1,214]},{13:[1,215]},{13:[1,216]},{13:[1,217]},{28:[1,218]},{10:$Vt,13:$Vu,28:$Vv,33:51,39:219,66:$Vw,67:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC},o($Vs1,[2,49]),o($VS,[2,57]),{2:$Vq,7:37,10:$Vr,11:220,16:$V1,22:14,23:$V5,26:$V6,27:$V7,29:$V8,32:$V9,35:$Va,36:$Vb,37:$Vc,38:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},{13:[1,221]},o($VS,[2,61]),o($Vi,[2,23]),{2:$Vq,7:37,10:$Vr,11:222,16:$V1,22:14,23:$V5,26:$V6,27:$V7,29:$V8,32:$V9,35:$Va,36:$Vb,37:$Vc,38:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},{2:$Vh1,7:189,10:$Vi1,23:$Vj1,26:$Vk1,27:$Vl1,29:$Vm1,32:$Vn1,35:$Vo1,36:$Vp1,37:[1,223],38:$Vq1,45:208,46:$Vr1,60:$Ve,61:$Vf,62:$Vg,63:$Vh},{28:[1,224]},o($Vs1,[2,36]),{2:$VJ,10:$Vt,13:$VK,24:225,33:78,59:$VL,66:$Vw,67:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC},{9:226,13:$Vl,20:$VD,28:$Vm,47:$Vn,48:$Vo,65:$Vp},o($Vs1,[2,40]),{2:$VJ,10:$Vt,13:$VK,24:227,33:78,59:$VL,66:$Vw,67:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC},{2:$V0,4:228,6:3,7:4,10:$V2,11:6,12:$V3,16:$V1,17:$V4,22:14,23:$V5,26:$V6,27:$V7,29:$V8,32:$V9,35:$Va,36:$Vb,37:$Vc,38:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},{2:$VM,7:84,10:$VN,30:229,60:$Ve,61:$Vf,62:$Vg,63:$Vh},{10:$Vt,13:$Vu,33:230,66:$Vw,67:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC},{10:$Vt,13:$Vu,33:231,66:$Vw,67:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC},{10:$Vt,13:$Vu,33:232,66:$Vw,67:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC},o($Vs1,[2,47]),o($Vs1,[2,48]),{2:$Vq,7:37,10:$Vr,16:[1,233],22:36,23:$V5,26:$V6,27:$V7,29:$V8,32:$V9,35:$Va,36:$Vb,37:$Vc,38:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},{2:$VJ,10:$Vt,13:$VK,24:234,33:78,59:$VL,66:$Vw,67:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC},{2:$Vq,7:37,10:$Vr,16:[1,235],22:36,23:$V5,26:$V6,27:$V7,29:$V8,32:$V9,35:$Va,36:$Vb,37:$Vc,38:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},{28:[1,236]},o($Ve1,[2,34]),{14:[1,237],51:$VV,52:$VW,53:$VX,54:$VY,55:$VZ,56:$V_,57:$V$,58:$V01},o($Vs1,[2,39]),{14:[1,238],51:$VV,52:$VW,53:$VX,54:$VY,55:$VZ,56:$V_,57:$V$,58:$V01},{2:$V0,6:25,7:4,10:$V2,11:6,12:$V3,16:[1,239],17:$V4,22:14,23:$V5,26:$V6,27:$V7,29:$V8,32:$V9,35:$Va,36:$Vb,37:$Vc,38:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},{2:$VJ,10:$Vt,13:$VK,24:240,33:78,59:$VL,66:$Vw,67:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC},{14:[1,241],66:$VO,68:$VP,69:$VQ,70:$VR},{14:[1,242],66:$VO,68:$VP,69:$VQ,70:$VR},{14:[1,243],66:$VO,68:$VP,69:$VQ,70:$VR},o($VS,[2,59]),{14:[1,244],51:$VV,52:$VW,53:$VX,54:$VY,55:$VZ,56:$V_,57:$V$,58:$V01},o($Vi,[2,24]),o($Ve1,[2,33]),{15:[1,245]},{15:[1,246]},{26:[1,247]},{28:[1,248],51:$VV,52:$VW,53:$VX,54:$VY,55:$VZ,56:$V_,57:$V$,58:$V01},{16:[1,249]},{28:[1,250]},{28:[1,251]},{15:[1,252]},{2:$Vq,7:37,10:$Vr,11:253,16:$V1,22:14,23:$V5,26:$V6,27:$V7,29:$V8,32:$V9,35:$Va,36:$Vb,37:$Vc,38:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},{2:$Vq,7:37,10:$Vr,11:254,16:$V1,22:14,23:$V5,26:$V6,27:$V7,29:$V8,32:$V9,35:$Va,36:$Vb,37:$Vc,38:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},{13:[1,255]},{10:[1,256]},{2:$V91,34:257,40:163,41:$Va1,44:$Vb1},o($Vs1,[2,45]),o($Vs1,[2,46]),{2:$Vq,7:37,10:$Vr,11:258,16:$V1,22:14,23:$V5,26:$V6,27:$V7,29:$V8,32:$V9,35:$Va,36:$Vb,37:$Vc,38:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},{2:$Vq,7:37,10:$Vr,16:[1,259],22:36,23:$V5,26:$V6,27:$V7,29:$V8,32:$V9,35:$Va,36:$Vb,37:$Vc,38:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},{2:$Vq,7:37,10:$Vr,16:[1,260],22:36,23:$V5,26:$V6,27:$V7,29:$V8,32:$V9,35:$Va,36:$Vb,37:$Vc,38:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},{2:$VJ,10:$Vt,13:$VK,24:261,33:78,59:$VL,66:$Vw,67:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC},{31:262,47:$Vc1,48:$Vd1},{2:$V91,15:[1,263],40:177,41:$Va1,44:$Vb1},{2:$Vq,7:37,10:$Vr,16:[1,264],22:36,23:$V5,26:$V6,27:$V7,29:$V8,32:$V9,35:$Va,36:$Vb,37:$Vc,38:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},o($Vs1,$Vf1,{25:265,49:$Vg1}),o($Vs1,[2,41]),{14:[1,266],51:$VV,52:$VW,53:$VX,54:$VY,55:$VZ,56:$V_,57:$V$,58:$V01},{14:[1,267]},o($Vs1,[2,44]),o($VS,$Vf1,{25:268,49:$Vg1}),o($Vs1,[2,38]),{28:[1,269]},{15:[1,270]},o($VS,[2,60]),o($Vs1,[2,42]),{2:$Vq,7:37,10:$Vr,11:271,16:$V1,22:14,23:$V5,26:$V6,27:$V7,29:$V8,32:$V9,35:$Va,36:$Vb,37:$Vc,38:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},{2:$Vq,7:37,10:$Vr,16:[1,272],22:36,23:$V5,26:$V6,27:$V7,29:$V8,32:$V9,35:$Va,36:$Vb,37:$Vc,38:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},o($Vs1,[2,43])],
defaultActions: {24:[2,1],174:[2,52],175:[2,53]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	let TIPO_OPERACION	= require('./instrucciones').TIPO_OPERACION;
	let TIPO_VALOR 		= require('./instrucciones').TIPO_VALOR;
	let instruccionesAPI	= require('./instrucciones').instruccionesAPI;
        let CErrores=require('./errores');
        let CNodoError=require('./nodoError');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 'rnumero';
break;
case 4:return 61;
break;
case 5:return 60;
break;
case 6:return 62;
break;
case 7:return 63;
break;
case 8:return 48;
break;
case 9:return 47;
break;
case 10:return 55;
break;
case 11:return 65;
break;
case 12:return 70;
break;
case 13:return 66;
break;
case 14:return 69;
break;
case 15:return 68;
break;
case 16:return 52;
break;
case 17:return 54;
break;
case 18:return 56;
break;
case 19:return 51;
break;
case 20:return 53;
break;
case 21:return 57;
break;
case 22:return 58;
break;
case 23:return 35;
break;
case 24:return 36;
break;
case 25:return 59;
break;
case 26:return 23;
break;
case 27:return 49;
break;
case 28:return 32;
break;
case 29:return 41;
break;
case 30:return 44;
break;
case 31:return 26;
break;
case 32:return 27;
break;
case 33:return 29;
break;
case 34:return 37;
break;
case 35:return 38;
break;
case 36:return 12;
break;
case 37:return 17;
break;
case 38:return'ttrue';
break;
case 39:return'tfalse';
break;
case 40:return 42;
break;
case 41:return 28;
break;
case 42:return 20;
break;
case 43:return 15;
break;
case 44:return 16;
break;
case 45:return 13;
break;
case 46:return 14;
break;
case 47: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 72; 
break;
case 48: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 73; 
break;
case 49:return 71;
break;
case 50:return 67;
break;
case 51:return 10;
break;
case 52:return 5;
break;
case 53:CErrores.errores.addError(new CNodoError.nodoError("LEXICO","No se esperaba el caracter: "+yy_.yytext,yy_.yylineno,yy_.yytext))
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:numero\b)/,/^(?:string\b)/,/^(?:int\b)/,/^(?:bool\b)/,/^(?:double\b)/,/^(?:--)/,/^(?:\+\+)/,/^(?:==)/,/^(?:=)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:>=)/,/^(?:<=)/,/^(?:!=)/,/^(?:>)/,/^(?:<)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:Console\.Write\b)/,/^(?:continue\b)/,/^(?:!)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:break\b)/,/^(?:return\b)/,/^(?:main\b)/,/^(?:void\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?::)/,/^(?:;)/,/^(?:,)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:"[^\"]*")/,/^(?:'[^\"]?')/,/^(?:[0-9]+(\.[0-9]+)\b)/,/^(?:[0-9]+\b)/,/^(?:([a-zA-Z_])[a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Gramatica;
exports.Parser = Gramatica.Parser;
exports.parse = function () { return Gramatica.parse.apply(Gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}